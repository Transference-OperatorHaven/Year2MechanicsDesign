//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Student Work/TestInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputAction"",
    ""maps"": [
        {
            ""name"": ""Test_Control_Map"",
            ""id"": ""16ab0a5f-e61b-4974-aeca-455d99182684"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""394f6bda-bc2d-45ba-bf91-9645137f2f1f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""f8b6f764-be40-4466-a106-a485987c339b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7ca199c1-4ecf-45ed-90e9-501c8b223baf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slam"",
                    ""type"": ""Button"",
                    ""id"": ""a5153f99-e51a-47cd-8eb3-676469b727c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da69b467-b70b-469c-9b37-a93732d17832"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f8382c4d-15ec-4c6a-8cac-16134ea3d5ae"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""69431644-3818-4033-9b26-3af5e587483c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""14208726-df75-4638-b699-0e7d651a506e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9faf8cbe-6554-4209-89a7-9e6a3ace35e2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7636df4c-16c7-41a9-b056-9f0d115f17d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Test_Control_Map
        m_Test_Control_Map = asset.FindActionMap("Test_Control_Map", throwIfNotFound: true);
        m_Test_Control_Map_Jump = m_Test_Control_Map.FindAction("Jump", throwIfNotFound: true);
        m_Test_Control_Map_Move = m_Test_Control_Map.FindAction("Move", throwIfNotFound: true);
        m_Test_Control_Map_Interact = m_Test_Control_Map.FindAction("Interact", throwIfNotFound: true);
        m_Test_Control_Map_Slam = m_Test_Control_Map.FindAction("Slam", throwIfNotFound: true);
    }

    ~@TestInputAction()
    {
        UnityEngine.Debug.Assert(!m_Test_Control_Map.enabled, "This will cause a leak and performance issues, TestInputAction.Test_Control_Map.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test_Control_Map
    private readonly InputActionMap m_Test_Control_Map;
    private List<ITest_Control_MapActions> m_Test_Control_MapActionsCallbackInterfaces = new List<ITest_Control_MapActions>();
    private readonly InputAction m_Test_Control_Map_Jump;
    private readonly InputAction m_Test_Control_Map_Move;
    private readonly InputAction m_Test_Control_Map_Interact;
    private readonly InputAction m_Test_Control_Map_Slam;
    public struct Test_Control_MapActions
    {
        private @TestInputAction m_Wrapper;
        public Test_Control_MapActions(@TestInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Test_Control_Map_Jump;
        public InputAction @Move => m_Wrapper.m_Test_Control_Map_Move;
        public InputAction @Interact => m_Wrapper.m_Test_Control_Map_Interact;
        public InputAction @Slam => m_Wrapper.m_Test_Control_Map_Slam;
        public InputActionMap Get() { return m_Wrapper.m_Test_Control_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Test_Control_MapActions set) { return set.Get(); }
        public void AddCallbacks(ITest_Control_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Slam.started += instance.OnSlam;
            @Slam.performed += instance.OnSlam;
            @Slam.canceled += instance.OnSlam;
        }

        private void UnregisterCallbacks(ITest_Control_MapActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Slam.started -= instance.OnSlam;
            @Slam.performed -= instance.OnSlam;
            @Slam.canceled -= instance.OnSlam;
        }

        public void RemoveCallbacks(ITest_Control_MapActions instance)
        {
            if (m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITest_Control_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Test_Control_MapActions @Test_Control_Map => new Test_Control_MapActions(this);
    public interface ITest_Control_MapActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSlam(InputAction.CallbackContext context);
    }
}
